name: net6-package-build

on:  
  workflow_call:
    inputs:
      build:
        type: string
        description: Type of Build (build,alpha,main)
        default: build
      exclusions:
        type: string
        default: ''
        required: false
      net3:
        type: boolean
        default: false
      net5:
        type: boolean
        default: false
      emulator:
        type: string
        default: ''
      testdirectory:
        type: string
        default: ''
      solutiondirectory:
        type: string
        default: './'
      packagedirectory:
        type: string
        default: './'
      packagefile:
        type: string
        default: 'package.json'
    secrets:
      GITHUB_PACKAGE_TOKEN:
        required: true
      GITHUB_PACKAGE_USERNAME: 
        required: true

jobs:
  build:    
    name: Build
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.solutiondirectory }}

    env:
      GITHUB_PACKAGE_TOKEN: ${{ secrets.GITHUB_PACKAGE_TOKEN }}
      GITHUB_PACKAGE_USERNAME: ${{ secrets.GITHUB_PACKAGE_USERNAME }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

    - uses: actions/checkout@v2

    # Below steps check if a release tag already exists matching the package.json, fails build on match
    - run: git fetch --all --tags

    - name: Check Release Tags
      id: deploy_check
      uses: thebongy/version-check@v1
      with:
        file: ${{ inputs.packagefile }}
        tagFormat: v${version}
    - name: Version Exists Validation
      run: echo "Version ${{steps.deploy_check.outputs.releaseVersion}}"
    
    # Initialise dotnet
    - name: Setup .NET6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Retrieves Version property from package.json, available as ${{ env.PACKAGE_VERSION }}
    - name: Get Package Version
      uses: nyaa8/package-version@v1
      with:
        path: ${{ inputs.packagefile }}
    # Set Version suffix for Alpha packages
    - name: Set Alpha Suffix
      if: ${{ inputs.build == 'alpha' }}
      shell: pwsh
      run: |
        $new_version = $env:PACKAGE_VERSION + '.' + $env:GITHUB_RUN_NUMBER + '-alpha'
        $new_version
        echo "PACKAGE_VERSION=$new_version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

    # Restore Packages
    - name: Restore Packages
      shell: pwsh
      run: dotnet restore

    # Build
    - name: Build Solution
      shell: pwsh
      run: dotnet build --no-restore -c Release -p:Version=$env:PACKAGE_VERSION

    # Pack - for Alpha,Main build
    - name: Pack Project
      if: ${{ inputs.build != 'build' }}
      shell: pwsh
      working-directory: ${{ inputs.packagedirectory }}
      run: dotnet pack -c Release -p:PackageVersion=$env:PACKAGE_VERSION

    # Push package, but fail if package already exists
    - name: Push Package to Github Packages
      if: ${{ inputs.build != 'build' }}
      shell: pwsh
      working-directory: ${{ inputs.packagedirectory }}
      run : dotnet nuget push **/bin/Release/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/software-mgt/index.json

    # Release tag if change to main
    - name: Tag Release in Repository with Release Notes
      if: ${{ inputs.build == 'main' }}
      run: gh release create v${{ env.PACKAGE_VERSION}} -F CHANGELOG.md 
